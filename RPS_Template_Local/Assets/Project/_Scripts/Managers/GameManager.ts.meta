fileFormatVersion: 2
guid: 973fbf2751fb4654cb5d2f8acdb422a6
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.Hands = void 0;\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst UIManager_1 = require(\"./UIManager\");\r\n//
    Enum with the posibles hands to select\r\nvar Hands;\r\n(function (Hands) {\r\n   
    Hands[Hands[\"rock\"] = 0] = \"rock\";\r\n    Hands[Hands[\"paper\"] = 1] = \"paper\";\r\n   
    Hands[Hands[\"scissors\"] = 2] = \"scissors\";\r\n})(Hands = exports.Hands ||
    (exports.Hands = {}));\r\n// This class is responsible for handling everything
    related to the gameplay of the game, calling other managers if necessary\r\nclass
    GameManager extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    // Awake is
    called when an enabled script instance is being loaded\r\n    Awake() {\r\n       
    // Singleton pattern\r\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality(GameManager.instance,
    null))\r\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\r\n       
    else\r\n            GameManager.instance = this;\r\n    }\r\n    // This functions
    will set the selection of the player hand\r\n    SelectPlayerHand(selection)
    {\r\n        // Call to the function SelectPlayerSprite on the UIManager\r\n       
    UIManager_1.default.instance.SetPlayerSprite(selection);\r\n        // Set the
    player selection\r\n        this.playerSelection = selection;\r\n    }\r\n   
    // This function will select the opponent hand (rock, paper or scissors)\r\n   
    SelectOpponentHand() {\r\n        // first we will let the variables to get a
    random hand\r\n        // Setting the random selection\r\n        let rnd = 0;\r\n       
    // Select a random number between 0 and the max ammount of options (In this case
    3)\r\n        rnd = UnityEngine_1.Random.Range(0, 3);\r\n        // if rnd gets
    a float as result it gets rounded to int\r\n        rnd = UnityEngine_1.Mathf.FloorToInt(rnd);\r\n       
    // Set the opponent selection to the random selection\r\n        this.opponentSelection
    = rnd;\r\n        // Call to the function SelectOpponentSprite on the UIManager\r\n       
    UIManager_1.default.instance.SetOpponentSprite(rnd);\r\n        // Evaluate this
    match\r\n        this.CompareHands();\r\n    }\r\n    // This function is responsible
    for comparing the hands selected by the player and the CPU, determining who will
    be the winner.\r\n    CompareHands() {\r\n        // We check if both selected
    the same thing.\r\n        if (this.playerSelection == this.opponentSelection)
    {\r\n            // We start the coroutine to resolve the situation.\r\n           
    this.StartCoroutine(this.WaitToResolve(false, true));\r\n            // Then
    stop the function\r\n            return;\r\n        }\r\n        // Set the variable
    to know if the player wins, letting this on false we only need to check if the
    player wins and not if he loses\r\n        let playerWins = false;\r\n       
    // We create a switch to cover the different possible selections of the player.\r\n       
    switch (this.playerSelection) {\r\n            // In the case that the player
    has selected \"rock\"...\r\n            case Hands.rock:\r\n                //
    We check if the opponent selected \"scissors\" and set the playerWins\r\n               
    if (this.opponentSelection == Hands.scissors) {\r\n                    playerWins
    = true;\r\n                }\r\n                break;\r\n            // In the
    case that the player has selected \"paper\"...\r\n            case Hands.paper:\r\n               
    // We check if the opponent selected \"scissors\" and set the playerWins\r\n               
    if (this.opponentSelection == Hands.rock) {\r\n                    playerWins
    = true;\r\n                }\r\n                break;\r\n            // In the
    case that the player has selected \"scissors\"...\r\n            case Hands.scissors:\r\n               
    // We check if the opponent selected \"paper\" and set the playerWins\r\n               
    if (this.opponentSelection == Hands.paper) {\r\n                    playerWins
    = true;\r\n                }\r\n                break;\r\n        }\r\n       
    // We start the coroutine to resolve the situation. \r\n        this.StartCoroutine(this.WaitToResolve(playerWins));\r\n   
    }\r\n    // This function is a coroutine that handles resolving the winner, resetting
    the selections, and passing some time to the winner later on\r\n    *WaitToResolve(playerWins,
    draw = false) {\r\n        // Here we wait 1 second before continue with the
    code\r\n        yield new UnityEngine_1.WaitForSeconds(1);\r\n        // We check
    if there was a tie based on the obtained parameters.\r\n        if (draw) {\r\n           
    // Call to the CleanSelections function of the UIManager instance\r\n           
    UIManager_1.default.instance.CleanSelections();\r\n            // Call to the
    ShowDrawEndPanel function of the UIManager instance\r\n            UIManager_1.default.instance.ShowDrawEndPanel();\r\n           
    // Stop the execution of the function.\r\n            return;\r\n        }\r\n       
    // Call to the CleanSelections function of the UIManager instance\r\n       
    UIManager_1.default.instance.CleanSelections();\r\n        // We check if the
    player won. If so, we call the \"ShowEndPanel\" function from the UIManager instance.\r\n       
    // Passing as parameters the text to be displayed for the winner and a boolean
    that determines if the player won or not.\r\n        // If not, we will call
    the same function but specifying that the winner was the CPU.\r\n        if (playerWins)\r\n           
    UIManager_1.default.instance.ShowEndPanel(\"Player\", true);\r\n        else\r\n           
    UIManager_1.default.instance.ShowEndPanel(\"CPU\", false);\r\n    }\r\n}\r\nexports.default
    = GameManager;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJHYW1lTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBd0U7QUFDeEUsaURBQXFEO0FBQ3JELDJDQUFpRDtBQUVqRCx5Q0FBeUM7QUFDekMsSUFBWSxLQUVYO0FBRkQsV0FBWSxLQUFLO0lBQ2IsaUNBQUksQ0FBQTtJQUFFLG1DQUFLLENBQUE7SUFBRSx5Q0FBUSxDQUFBO0FBQ3pCLENBQUMsRUFGVyxLQUFLLEdBQUwsYUFBSyxLQUFMLGFBQUssUUFFaEI7QUFFRCw2SEFBNkg7QUFDN0gsTUFBcUIsV0FBWSxTQUFRLHFDQUFxQjtJQVExRCxrRUFBa0U7SUFDbEUsS0FBSztRQUNELG9CQUFvQjtRQUNwQixJQXBCQyxxQ0FBcUIsQ0E0SDRrRCxhQUFjLENBeEczbUQsV0FBVyxDQUFDLFFBQVEsRUFBSSxJQUFJO1lBQUcsd0JBQVUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDOztZQUNyRSxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUNyQyxDQUFDO0lBRUQsMkRBQTJEO0lBQ3BELGdCQUFnQixDQUFHLFNBQWM7UUFDcEMsMkRBQTJEO1FBQzNELG1CQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBRSxTQUFTLENBQUUsQ0FBQztRQUVoRCwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7SUFDckMsQ0FBQztJQUVELHdFQUF3RTtJQUNqRSxrQkFBa0I7UUFDckIsdURBQXVEO1FBRXZELCtCQUErQjtRQUMvQixJQUFJLEdBQUcsR0FBUSxDQUFDLENBQUM7UUFFakIsbUZBQW1GO1FBQ25GLEdBQUcsR0FBRyxvQkFBTSxDQUFDLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFFM0IsdURBQXVEO1FBQ3ZELEdBQUcsR0FBRyxtQkFBSyxDQUFDLFVBQVUsQ0FBRSxHQUFHLENB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","assetPath":"Assets/Project/_Scripts/Managers/GameManager.ts","manifest":{"properties":[{"assembly":"mscorlib","name":"counterToStart","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"GameManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: dbd2e4237f7f3ac39a2f8a151c360729
  onlyWriteTrigger: 0
