fileFormatVersion: 2
guid: 0a19f0a195361d045babd5753ecfb8f4
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.UIPanel = void 0;\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst GameManager_1 = require(\"./GameManager\");\r\n//
    Enum  with the posible panels to show\r\nvar UIPanel;\r\n(function (UIPanel)
    {\r\n    UIPanel[UIPanel[\"Start\"] = 0] = \"Start\";\r\n    UIPanel[UIPanel[\"Game\"]
    = 1] = \"Game\";\r\n    UIPanel[UIPanel[\"End\"] = 2] = \"End\";\r\n    UIPanel[UIPanel[\"None\"]
    = 3] = \"None\";\r\n})(UIPanel = exports.UIPanel || (exports.UIPanel = {}));\r\n//
    This class is responsible for controlling everything related to the UI and its
    interactions.\r\nclass UIManager extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.playerWinsAmount
    = 0; // Variable to save the amount of wins of the player\r\n        this.playerLosesAmount
    = 0; // Variable to save the amount of loses of the player\r\n    }\r\n    //
    Awake is called when an enabled script instance is being loaded.\r\n    Awake()
    {\r\n        // Singleton pattern\r\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality(UIManager.instance,
    null))\r\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\r\n       
    else\r\n            UIManager.instance = this;\r\n    }\r\n    // Start is called
    on the frame when a script is enabled just before any of the Update methods are
    called the first time.\r\n    Start() {\r\n        // Call the function to set
    the logic of the buttons\r\n        this.SetButtonLogic();\r\n    }\r\n    //
    This function displays the EndPanel using the parameters to show the winner''s
    name and determine if the player won or not\r\n    ShowEndPanel(winner, playerWins)
    {\r\n        // Deactivate the gamePanel\r\n        this.gamePanel.SetActive(false);\r\n       
    // Activate the endpanel\r\n        this.endPanel.SetActive(true);\r\n       
    // Call to the EndPanelColorChane function\r\n        this.EndPanelColorChange(playerWins);\r\n       
    // Set the winnertext to the parameter passed\r\n        this.winnerText.text
    = winner;\r\n        // Check if the player wins and increase the wins o loses
    amount\r\n        if (playerWins)\r\n            this.playerWinsAmount++;\r\n       
    else\r\n            this.playerLosesAmount++;\r\n        // Then set the wins
    and the loses amount text with the variables\r\n        this.winsAmount.text
    = this.playerWinsAmount.toString();\r\n        this.losesAmount.text = this.playerLosesAmount.toString();\r\n   
    }\r\n    // This function shows the draw panel when the player and cpu select
    the same \r\n    ShowDrawEndPanel() {\r\n        // Deactivate the game panel\r\n       
    this.gamePanel.SetActive(false);\r\n        // Activate the end panel\r\n       
    this.endPanel.SetActive(true);\r\n        // Call to the EndPanelColorChane function\r\n       
    this.EndPanelColorChange(false, true);\r\n        // Set the winner text to Draw\r\n       
    this.winnerText.text = \"Draw!\";\r\n        // Set the wins and the loses amount
    text with the variables\r\n        this.winsAmount.text = this.playerWinsAmount.toString();\r\n       
    this.losesAmount.text = this.playerLosesAmount.toString();\r\n    }\r\n    //
    This function set the logic of the buttons off the ui\r\n    SetButtonLogic()
    {\r\n        // Set the function of the click on the rock button\r\n        this.rockBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(0);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    // Set the function of the click on the paper button\r\n        this.paperBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(1);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    // Set the function of the click on the scissors button\r\n        this.scissorsBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(2);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    this.playBtn.OnClick.AddListener(() => {\r\n            this.StartCoroutine(GameManager_1.default.instance.WaitToStart());\r\n       
    });\r\n        // Deactivate all the panels and the exit button\r\n        this.ShowPanel();\r\n   
    }\r\n    // This functions sets the sprite of the player hand in the selected
    one\r\n    SelectPlayerSprite(selection) {\r\n        // Set the icon of the
    opponent on the selection based on the array gameSprites\r\n        // this.playerIcon.Icon
    = this.gameSprites[ selection ];\r\n        this.playerIcon.Icon = this.SpriteSelection(selection);\r\n       
    this.playerIcon.IconScale = 2;\r\n    }\r\n    // This functions sets the sprite
    of the opponent hand in the selected one\r\n    SelectOpponentSprite(selection)
    {\r\n        // Set the icon of the opponent on the selection based on the array
    gameSprites\r\n        // this.opponentIcon.Icon = this.gameSprites[ selection
    ];\r\n        this.opponentIcon.Icon = this.SpriteSelection(selection);\r\n       
    this.opponentIcon.IconScale = 2;\r\n    }\r\n    // This functions set the scale
    of the icons of the selection in 0\r\n    CleanSelections() {\r\n        this.opponentIcon.IconScale
    = 0;\r\n        this.playerIcon.IconScale = 0;\r\n    }\r\n    // This function
    select and return a sprite based on the selection parameter\r\n    SpriteSelection(selection)
    {\r\n        if (selection == 0)\r\n            return this.rockSprite;\r\n       
    if (selection == 1)\r\n            return this.paperSprite;\r\n        if (selection
    == 2)\r\n            return this.scissorsSprite;\r\n    }\r\n    // This function
    is responsible for changing the background color of the EndPanel according to
    who wins or if there is a tie\r\n    EndPanelColorChange(playerWins, draw = false)
    {\r\n        // If there is a draw, then the set the color and stop the progress
    of the function\r\n        if (draw) {\r\n            this.endPanelBg.color =
    UnityEngine_1.Color.white;\r\n            return;\r\n        }\r\n        //
    Check if the player wins and select the correspondent color\r\n        if (playerWins)\r\n           
    this.endPanelBg.color = this.playerWinColor;\r\n        else\r\n            this.endPanelBg.color
    = this.cpuWinColor;\r\n    }\r\n    // This function is responsible for, based
    on the received parameter, selecting which panel should be displayed while hiding
    the others.\r\n    ShowPanel(panel = UIPanel.None) {\r\n        // Deactivate
    all the panels\r\n        this.startPanel.SetActive(false);\r\n        this.gamePanel.SetActive(false);\r\n       
    this.endPanel.SetActive(false);\r\n        // Then switch on the parameter received
    to active one of them\r\n        switch (panel) {\r\n            case UIPanel.Start:\r\n               
    // Activate the startPanel\r\n                this.startPanel.SetActive(true);\r\n               
    break;\r\n            case UIPanel.Game:\r\n                // Activate the gamePanel\r\n               
    this.gamePanel.SetActive(true);\r\n                break;\r\n            case
    UIPanel.End:\r\n                // Activate the endPanel\r\n                this.endPanel.SetActive(true);\r\n               
    break;\r\n            default:\r\n                // If the parameter is none
    or not defined, also deactivate the exitBtn\r\n                this.exitBtn.gameObject.SetActive(false);\r\n               
    break;\r\n        }\r\n    }\r\n}\r\nexports.default = UIManager;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVUlNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVUlNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFxRDtBQUNyRCw2Q0FBdUU7QUFFdkUsK0NBQXdDO0FBRXhDLHdDQUF3QztBQUN4QyxJQUFZLE9BRVg7QUFGRCxXQUFZLE9BQU87SUFDZix1Q0FBSyxDQUFBO0lBQUUscUNBQUksQ0FBQTtJQUFFLG1DQUFHLENBQUE7SUFBRSxxQ0FBSSxDQUFBO0FBQzFCLENBQUMsRUFGVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFFbEI7QUFFRCwrRkFBK0Y7QUFDL0YsTUFBcUIsU0FBVSxTQUFRLHFDQUFxQjtJQUE1RDs7UUFvQ1kscUJBQWdCLEdBQVcsQ0FBQyxDQUFDLENBQUMsb0RBQW9EO1FBQ2xGLHNCQUFpQixHQUFXLENBQUMsQ0FBQyxDQUFDLHFEQUFxRDtJQW1LaEcsQ0FBQztJQWpLRyxtRUFBbUU7SUFDbkUsS0FBSztRQUNELG9CQUFvQjtRQUNwQixJQXJEQyxxQ0FBcUIsQ0E4SjBCLGFBQWEsQ0F6R3hELFNBQVMsQ0FBQyxRQUFRLEVBQUksSUFBSTtZQUFHLHdCQUFVLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUUsQ0FBQzs7WUFDbkUsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQztJQUVELHlIQUF5SDtJQUN6SCxLQUFLO1FBQ0Qsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsNEhBQTRIO0lBQzVILFlBQVksQ0FBRyxNQUFjLEVBQUUsVUFBZ0I7UUFDM0MsMkJBQTJCO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFFLEtBQUssQ0FBRSxDQUFDO1FBRWxDLHdCQUF3QjtRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUVoQywwQ0FBMEM7UUFD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","assetPath":"Assets/Project/_Scripts/Managers/UIManager.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"rockSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"paperSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"scissorsSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"counterObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Counter\""]}]},{"assembly":"ZEPETO.World.Gui","name":"counterText","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"startPanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Panels\""]},{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"gamePanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"endPanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"endPanelBg","type":"ZEPETO.World.Gui.RoundedRectangle","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"playerIcon","type":"ZEPETO.World.Gui.RoundedRectangle","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Game\""]},{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"opponentIcon","type":"ZEPETO.World.Gui.RoundedRectangle","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"winnerText","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"End
    screen\""]},{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"winsAmount","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"losesAmount","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"playerWinColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cpuWinColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"playBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Buttons\""]}]},{"assembly":"ZEPETO.World.Gui","name":"rockBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"paperBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"scissorsBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"exitBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"UIManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: e63d7691ec357d46e1cf4ceb32761e85
  onlyWriteTrigger: 0
