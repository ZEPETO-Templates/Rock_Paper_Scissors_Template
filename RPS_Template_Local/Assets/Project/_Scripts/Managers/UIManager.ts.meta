fileFormatVersion: 2
guid: 0a19f0a195361d045babd5753ecfb8f4
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.UIPanel = void 0;\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst GameManager_1 = require(\"./GameManager\");\r\n//
    Enum  with the posible panels to show\r\nvar UIPanel;\r\n(function (UIPanel)
    {\r\n    UIPanel[UIPanel[\"Start\"] = 0] = \"Start\";\r\n    UIPanel[UIPanel[\"Game\"]
    = 1] = \"Game\";\r\n    UIPanel[UIPanel[\"End\"] = 2] = \"End\";\r\n    UIPanel[UIPanel[\"None\"]
    = 3] = \"None\";\r\n})(UIPanel = exports.UIPanel || (exports.UIPanel = {}));\r\n//
    This class is responsible for controlling everything related to the UI and its
    interactions.\r\nclass UIManager extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.playerWinsAmount
    = 0; // Variable to save the amount of wins of the player\r\n        this.playerLosesAmount
    = 0; // Variable to save the amount of loses of the player\r\n    }\r\n    //
    Awake is called when an enabled script instance is being loaded.\r\n    Awake()
    {\r\n        // Singleton pattern\r\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Inequality
    // This function is responsible for, based on the received parameter, selecting
    which panel should be displayed while hiding the others.\r\n        (UIManager.instance,
    null))\r\n            UnityEngine_1.GameObject.Destroy(this.gameObject);\r\n       
    else\r\n            UIManager.instance = this;\r\n    }\r\n    // Start is called
    on the frame when a script is enabled just before any of the Update methods are
    called the first time.\r\n    Start() {\r\n        // Call the function to set
    the logic of the buttons\r\n        this.InitButtonsListeners();\r\n    }\r\n   
    // This function set the logic of the buttons off the ui\r\n    InitButtonsListeners()
    {\r\n        // Set the function of the click on the rock button\r\n        this.rockBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(0);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    // Set the function of the click on the paper button\r\n        this.paperBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(1);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    // Set the function of the click on the scissors button\r\n        this.scissorsBtn.OnClick.AddListener(()
    => {\r\n            // Call the function on the GameManager instance to select
    the hand\r\n            GameManager_1.default.instance.SelectPlayerHand(2);\r\n           
    // Call the function on the GameManager instance to select the opponent hand\r\n           
    GameManager_1.default.instance.SelectOpponentHand();\r\n        });\r\n       
    // Set the function of the click on the play button\r\n        this.playBtn.OnClick.AddListener(()
    => {\r\n            // Call to the coroutine to start the game\r\n           
    this.StartCoroutine(this.WaitToStart());\r\n        });\r\n        // Deactivate
    all the panels and the exit button\r\n        this.ShowPanel();\r\n    }\r\n   
    // This function updates the counter of wins and loses of the ui\r\n    UpdateWinLoseCounter()
    {\r\n        // Replace the text of winsLosesCounter to show the updated number
    of them\r\n        this.winsLosesCounter.text = this.playerWinsAmount + \" /
    \" + this.playerLosesAmount;\r\n    }\r\n    // This function displays the EndPanel
    and show who is the winner\r\n    ShowEndPanel(winner, playerWins) {\r\n       
    // Deactivate the gamePanel\r\n        this.gamePanel.SetActive(false);\r\n       
    // Activate the endpanel\r\n        this.endPanel.SetActive(true);\r\n       
    // Call to the EndPanelColorChane function\r\n        this.ChangeEndPanelColor(playerWins);\r\n       
    // Set the winnertext to the parameter passed\r\n        this.winnerText.text
    = winner;\r\n        // Check if the player wins and increase the wins o loses
    amount\r\n        if (playerWins)\r\n            this.playerWinsAmount++;\r\n       
    else\r\n            this.playerLosesAmount++;\r\n        // Then set the wins
    and the loses amount text with the variables\r\n        this.winsAmount.text
    = this.playerWinsAmount.toString();\r\n        this.losesAmount.text = this.playerLosesAmount.toString();\r\n       
    // Call to the Update wins and loses function\r\n        this.UpdateWinLoseCounter();\r\n   
    }\r\n    // This function shows the draw panel\r\n    ShowDrawEndPanel() {\r\n       
    // Call the function to show the end panel\r\n        this.ShowPanel(UIPanel.End);\r\n       
    // Call to the EndPanelColorChane function\r\n        this.ChangeEndPanelColor(false,
    true);\r\n        // Set the winner text to Draw\r\n        this.winnerText.text
    = \"Draw!\";\r\n        // Set the wins and the loses amount text with the variables\r\n       
    this.winsAmount.text = this.playerWinsAmount.toString();\r\n        this.losesAmount.text
    = this.playerLosesAmount.toString();\r\n    }\r\n    // This function is responsible
    for, based on the received parameter, selecting which panel should be displayed
    while hiding the others.\r\n    ShowPanel(panel = UIPanel.None) {\r\n       
    // Deactivate all the panels keeping active the winslosesobj\r\n        this.startPanel.SetActive(false);\r\n       
    this.gamePanel.SetActive(false);\r\n        this.endPanel.SetActive(false);\r\n       
    this.winsLosesObj.SetActive(true);\r\n        // Then switch on the parameter
    received to active one of them\r\n        switch (panel) {\r\n            case
    UIPanel.Start:\r\n                // Activate the startPanel\r\n               
    this.startPanel.SetActive(true);\r\n                break;\r\n            case
    UIPanel.Game:\r\n                // Activate the gamePanel\r\n               
    this.gamePanel.SetActive(true);\r\n                // Call to the cleanSelections
    function\r\n                this.CleanSelections();\r\n                break;\r\n           
    case UIPanel.End:\r\n                // Activate the endPanel\r\n               
    this.endPanel.SetActive(true);\r\n                break;\r\n            default:\r\n               
    // If the parameter is none or not defined, also deactivate the exitBtn\r\n               
    this.exitBtn.gameObject.SetActive(false);\r\n                this.winsLosesObj.SetActive(false);\r\n               
    break;\r\n        }\r\n    }\r\n    // This functions set the icons of the selections
    of the players on the base state\r\n    CleanSelections() {\r\n        // Set
    the scales on 0.6 and show the question mark on both selections\r\n        // 
    this.opponentIcon.IconScale = 0.6;\r\n        this.opponentIcon.Icon = this.questionMarkSprite;\r\n       
    //  this.playerIcon.IconScale = 0.6;\r\n        this.playerIcon.Icon = this.questionMarkSprite;\r\n   
    }\r\n    // This function is responsible for changing the background color of
    the EndPanel according to who wins or if there is a tie\r\n    ChangeEndPanelColor(playerWins,
    draw = false) {\r\n        // If there is a draw, then the set the color and
    stop the progress of the function\r\n        if (draw) {\r\n            this.endPanelBg.color
    = UnityEngine_1.Color.white;\r\n            return;\r\n        }\r\n        //
    Check if the player wins and select the correspondent color\r\n        if (playerWins)\r\n           
    this.endPanelBg.color = this.playerWinColor;\r\n        else\r\n            this.endPanelBg.color
    = this.cpuWinColor;\r\n    }\r\n    // This function is a Coroutine that shows
    the counter before start the game\r\n    *WaitToStart() {\r\n        // Set a
    counter with the variable previously assigned by inspector with the time to start\r\n       
    let counter = GameManager_1.default.instance.counterToStart;\r\n        // Call
    the function of the UIManager to show the number on the text\r\n        this.counterText.text
    = counter.toString();\r\n        // Deactivate the play button of the UI using
    the variable of the UIManager\r\n        this.playBtn.gameObject.SetActive(false);\r\n       
    // Deactivate the game name object of the UI\r\n        this.gameNameObj.SetActive(false);\r\n       
    // Activate the object of the counter in the UI using the variable of the UIManager\r\n       
    this.counterObj.SetActive(true);\r\n        // Here we start a loop to count
    by seconds and show that on the counter object\r\n        while (true) {\r\n           
    // Here we wait 1 second before continue with the code\r\n            yield new
    UnityEngine_1.WaitForSeconds(1);\r\n            // We subtract 1 from the counter
    variable\r\n            counter--;\r\n            // Update the counter text
    in the UI using the variable of the UIManager\r\n            this.counterText.text
    = counter.toString();\r\n            // console.log( \"Counter: \" + counter
    );\r\n            // We chekc if the counter is 0 then we break the loop to continue
    with the code\r\n            if (counter == 0)\r\n                break;\r\n       
    }\r\n        // Update the counter text to \"START!\" in the UI using the variable
    of the UIManager\r\n        this.counterText.text = \"START!\";\r\n        //
    Wait for 0.5 seconds to continue, giving sometime to see the \"Start!\" text\r\n       
    yield new UnityEngine_1.WaitForSeconds(0.5);\r\n        // Then we need to restart
    the panles, so we use the instance of the UIManager to:\r\n        // Deactivate
    the counter object\r\n        this.counterObj.SetActive(false);\r\n        //
    Activate the play button\r\n        this.playBtn.gameObject.SetActive(true);\r\n       
    // Activate the game name object\r\n        this.gameNameObj.SetActive(false);\r\n       
    // Call to the function ShowPanel to activate the game panel\r\n        this.ShowPanel(UIPanel.Game);\r\n       
    // With this, now we are showing the game panel to start play\r\n        // and
    we reset the start panel if the player wants to play again\r\n    }\r\n    ResetFadeIn()
    {\r\n        this.blackout.color = new UnityEngine_1.Color(this.blackout.color.r,
    this.blackout.color.g, this.blackout.color.b, 0);\r\n    }\r\n    InitFadeIn()
    {\r\n        // Init the coroutine to show the blackout\r\n        this.StartCoroutine(this.FadeIn());\r\n   
    }\r\n    *FadeIn() {\r\n        let elapsedTime = 0;\r\n        let fadeDuration
    = 0.25;\r\n        let maxAlpha = 0.6;\r\n        while (elapsedTime < fadeDuration)
    {\r\n            let newAlpha = UnityEngine_1.Mathf.Lerp(0, maxAlpha, elapsedTime
    / fadeDuration);\r\n            this.blackout.color = new UnityEngine_1.Color(this.blackout.color.r,
    this.blackout.color.g, this.blackout.color.b, newAlpha);\r\n            elapsedTime
    += UnityEngine_1.Time.deltaTime;\r\n            yield null;\r\n        }\r\n       
    this.blackout.color = new UnityEngine_1.Color(this.blackout.color.r, this.blackout.color.g,
    this.blackout.color.b, maxAlpha);\r\n    }\r\n    // This functions sets the
    sprite of the player hand in the selected one\r\n    SetPlayerSprite(selection)
    {\r\n        // Set the icon of the opponent on the selection based on the array
    gameSprites\r\n        // this.playerIcon.Icon = this.gameSprites[ selection
    ];\r\n        this.playerIcon.Icon = this.GetHandSprite(selection);\r\n       
    //   this.playerIcon.IconScale = 1.7;\r\n    }\r\n    // This functions sets
    the sprite of the opponent hand in the selected one\r\n    SetOpponentSprite(selection)
    {\r\n        // Set the icon of the opponent on the selection based on the array
    gameSprites\r\n        // this.opponentIcon.Icon = this.gameSprites[ selection
    ];\r\n        this.opponentIcon.Icon = this.GetHandSprite(selection);\r\n       
    // this.opponentIcon.IconScale = 1.7;\r\n    }\r\n    // This function select
    and return a sprite based on the selection parameter\r\n    GetHandSprite(selection)
    {\r\n        if (selection == GameManager_1.Hands.Rock)\r\n            return
    this.rockSprite;\r\n        if (selection == GameManager_1.Hands.Paper)\r\n           
    return this.paperSprite;\r\n        if (selection == GameManager_1.Hands.Scissors)\r\n           
    return this.scissorsSprite;\r\n    }\r\n}\r\nexports.default = UIManager;\r\n//#
    sourceMappingURL=data:application/json;base64,","assetPath":"Assets/Project/_Scripts/Managers/UIManager.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"rockSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"paperSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"scissorsSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"questionMarkSprite","type":"UnityEngine.Sprite","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.UI","name":"blackout","type":"UnityEngine.UI.Image","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"gameNameObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Info
    showing\""]}]},{"assembly":"UnityEngine.CoreModule","name":"counterObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"counterText","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"winsLosesObj","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"winsLosesCounter","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"UnityEngine.CoreModule","name":"startPanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Panels\""]},{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"gamePanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"endPanel","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"endPanelBg","type":"ZEPETO.World.Gui.RoundedRectangle","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"playerIcon","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Game\""]},{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"opponentIcon","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"winnerText","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"End
    screen\""]},{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"winsAmount","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"losesAmount","type":"ZEPETO.World.Gui.ZepetoText","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"playerWinColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"UnityEngine.CoreModule","name":"cpuWinColor","type":"UnityEngine.Color","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"SerializeField","args":[]}]},{"assembly":"ZEPETO.World.Gui","name":"playBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Buttons\""]}]},{"assembly":"ZEPETO.World.Gui","name":"rockBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"paperBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"scissorsBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.World.Gui","name":"exitBtn","type":"ZEPETO.World.Gui.RoundedRectangleButton","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"UIManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 59dd326f5c247b5775739c78e127e813
  onlyWriteTrigger: 0
